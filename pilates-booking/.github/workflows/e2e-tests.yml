name: End-to-End Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Run daily at 2 AM UTC

jobs:
  backend-e2e:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: e2e_pilates_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/e2e_pilates_db
      run: |
        python -m alembic upgrade head
    
    - name: Seed test data
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/e2e_pilates_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m app.scripts.seed_data
    
    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/e2e_pilates_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-e2e
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
    
    - name: Run backend E2E tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/e2e_pilates_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-e2e
        API_BASE_URL: http://localhost:8000
      run: |
        python -m pytest tests/e2e -v --tb=short
    
    - name: Upload backend E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-e2e-results
        path: ./backend/pytest-reports/
        retention-days: 30

  mobile-e2e:
    runs-on: macos-latest
    needs: backend-e2e
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Install dependencies
      working-directory: ./mobile
      run: |
        npm ci
    
    - name: Setup Detox environment
      run: |
        brew tap wix/brew
        brew install applesimutils
        npm install -g detox-cli
    
    - name: Build iOS app for testing
      working-directory: ./mobile
      run: |
        npx expo prebuild --platform ios
        npx detox build --configuration ios.sim.debug
    
    - name: Run Detox E2E tests
      working-directory: ./mobile
      run: |
        npx detox test --configuration ios.sim.debug --record-logs all
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: detox-artifacts
        path: |
          ./mobile/artifacts/
          ./mobile/detox_logs/
        retention-days: 30

  mobile-e2e-android:
    runs-on: ubuntu-latest
    needs: backend-e2e
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      working-directory: ./mobile
      run: |
        npm ci
        
    - name: Setup Detox environment
      run: |
        npm install -g detox-cli
        
    - name: Build Android app for testing
      working-directory: ./mobile
      run: |
        npx expo prebuild --platform android
        npx detox build --configuration android.emu.debug
        
    - name: Run Android E2E tests
      working-directory: ./mobile
      run: |
        npx detox test --configuration android.emu.debug --record-logs all
        
    - name: Upload Android E2E test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: detox-android-artifacts
        path: |
          ./mobile/artifacts/
          ./mobile/detox_logs/
        retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    needs: backend-e2e
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install mobile dependencies
      working-directory: ./mobile
      run: |
        npm ci
    
    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/integration_test_db
        SECRET_KEY: test-secret-key-for-integration
      run: |
        python -m alembic upgrade head
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run integration tests
      working-directory: ./mobile
      env:
        API_BASE_URL: http://localhost:8000
        TEST_MODE: integration
      run: |
        npm test -- --testPathPattern=tests/integration --watchAll=false
    
    - name: Test API contract compatibility
      run: |
        # Install API testing tools
        npm install -g newman
        
        # Run Postman/Newman tests if they exist
        if [ -f "./tests/api/pilates-booking.postman_collection.json" ]; then
          newman run ./tests/api/pilates-booking.postman_collection.json \
            --environment ./tests/api/test-environment.json \
            --reporters json,cli \
            --reporter-json-export newman-results.json
        fi

  performance-tests:
    runs-on: ubuntu-latest
    needs: backend-e2e
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: performance_test_db
        ports:
          - 5432:5432
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/performance_test_db
      run: |
        python -m alembic upgrade head
        python -m app.scripts.seed_data
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance tests
      working-directory: ./backend
      run: |
        # Run Locust performance tests if they exist
        if [ -d "tests/performance" ]; then
          locust -f tests/performance/locustfile.py \
            --headless \
            --users 10 \
            --spawn-rate 2 \
            --run-time 60s \
            --host http://localhost:8000 \
            --html performance-report.html
        fi
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: ./backend/performance-report.html
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-e2e, mobile-e2e, mobile-e2e-android, integration-tests]
    if: always()
    
    steps:
    - name: E2E Test Summary
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'Backend E2E': '${{ needs.backend-e2e.result }}',
            'Mobile E2E (iOS)': '${{ needs.mobile-e2e.result }}',
            'Mobile E2E (Android)': '${{ needs.mobile-e2e-android.result }}',
            'Integration Tests': '${{ needs.integration-tests.result }}'
          };
          
          let summary = '## 🔬 E2E Test Results\n\n';
          
          for (const [test, result] of Object.entries(results)) {
            const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
            summary += `${emoji} **${test}**: ${result}\n`;
          }
          
          summary += '\n📊 **Test Artifacts**: Check the workflow artifacts for detailed reports and logs.';
          
          console.log(summary);
          
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }