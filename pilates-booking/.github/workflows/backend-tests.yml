name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: test_pilates_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      working-directory: ./backend
      run: |
        python -m black . --check
        python -m isort . --check-only
        python -m flake8 .

    - name: Run unit tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/test_pilates_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        REFRESH_TOKEN_EXPIRE_DAYS: 7
      run: |
        python -m pytest tests/unit -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/test_pilates_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        REFRESH_TOKEN_EXPIRE_DAYS: 7
        STRIPE_PUBLISHABLE_KEY: pk_test_fake_key
        STRIPE_SECRET_KEY: sk_test_fake_key
      run: |
        python -m pytest tests/integration -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check test coverage
      working-directory: ./backend
      run: |
        python -m pytest --cov=app --cov-fail-under=80 --cov-report=term-missing

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/
        
    - name: Check for known security vulnerabilities
      working-directory: ./backend
      run: |
        safety check --json || true
        safety check

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: ./backend/bandit-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: test_pilates_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Run performance tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/test_pilates_db
        SECRET_KEY: test-secret-key-for-ci
      run: |
        # Run performance tests if they exist
        if [ -d "tests/performance" ]; then
          python -m pytest tests/performance -v --tb=short
        fi

  build-check:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check imports and basic syntax
      working-directory: ./backend
      run: |
        python -c "import app.main; print('✅ Main app imports successfully')"
        python -c "from app.api.v1.api import api_router; print('✅ API router imports successfully')"
        python -c "from app.core.config import settings; print('✅ Settings imports successfully')"